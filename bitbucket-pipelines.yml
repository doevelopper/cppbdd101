#image: dobrautz/neci_base:14.04
# i have two more images, which mimick the office setting, prepared now: 
#image: dobrautz/neci_base:opensuse13.2
image: dobrautz/neci_base:opensuse42.2

pipelines:
 default: 
  - step: 
     script: 
        # first do the debug build + hdf5 
      #- echo "building debug version + hdf5!"
      - rm -rf build 
      - mkdir build 
      - cd build 
      #- cmake -DENABLE_BUILD_HDF5=On -DENABLE_HDF5=On -DCMAKE_BUILD_TYPE=Debug ..
      #- make -j neci mneci kneci kmneci dneci
      #- echo "done building debug version. clean up!"
      #- rm -rf * 
      - echo "building release version + hdf5!"
      - cmake -DENABLE_BUILD_HDF5=ON -DENABLE_HDF5=ON ..
      - make -j 
      - echo "done building release version + hdf5!"
      - echo "running unit tests"
      - ctest
      - echo "unit tests passed"
      - echo "running limited test_suite(to save build-minutes)"
      - useradd temp
      - cd ../test_suite
      - su -c "/testcode/bin/testcode.py -c dneci/double_occ/hub_2x2 -c kmneci/Rn_lanczos_dci_init -c kneci/C_221_int -c mneci/cfqmc/HeHe_5_states -c neci/parallel/C_Solid" -s /bin/sh temp
      # Now configure with CMake build system
      # - echo "Running the CMake Build System"
      # - cd ../build_cmake
      # - cmake .. -DCMAKE_C_FLAGS="-fPIC -DPIC" -DCMAKE_CXX_FLAGS="-fPIC -DPIC" -DBUILD_SHARED_LIBS=OFF -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--no-undefined" -DENABLE_MPI=ON -DMPIHOME=/usr -DENABLE_HDF5=ON -DHDF5_ROOT=/usr -DENABLE_NETCDF=OFF -DENABLE_METIS=ON -DMETIS_DIR=/usr
      # - make all test
      # - make dist
      # Successfully finished both Autotools and CMake checks
      # - echo "All done!


# [W.D.] ignore the stuff below for now, will clean up later
 custom:
  test:
   - step:
      script:
      - echo "test manual"
      - rm -rf build_docker_test
      - mkdir build_docker_test 
      - cd build_docker_test 
      - cmake ..
      - make neci
      - rm -rf * 
      - cd .. 
      - rmdir build_docker_test
      - echo "done!"

  test_suite: 
   - step: 
      script: 
       - echo "test to run test_suite:"
       - rm -rf build
       - mkdir build 
       - cd build 
       - cmake .. 
       - make -j
       - cd ../test_suite 
       - testcode.py 
       - echo "the question is does this flag it as succesfull only if it passes??"

  test_suite_single: 
   - step: 
      script: 
       - echo "test to run test_suite:"
       - rm -rf build
       - mkdir build 
       - cd build 
       - cmake .. 
       - make -j neci
       - cd ../test_suite 
         # i have to run mpi as non root.. do some workaround
       - adduser temp
       - su -c "/testcode/bin/testcode.py -c neci/parallel/C_Solid" -s /bin/sh temp
         # - /testcode/bin/testcode.py -c neci/parallel/C_Solid
       - echo "the question is does this flag it as succesfull only if it passes??"

  test_suite_single_serial:
    - step:
       script: 
        - echo "test to run test_suite:"
        - rm -rf build
        - mkdir build 
        - cd build 
        - cmake .. 
        - make -j neci
        - cd ../test_suite 
        - /testcode/bin/testcode.py -c neci/serial/2x2_real_space_hubbard
        - echo "the question is does this flag it as succesfull only if it passes??"

  full_test_suite:
    - step: 
       script:
         # try and run the full test_suite, to see how long it takes.. 
        - rm -rf build 
        - mkdir build 
        - cd build 
        - cmake .. 
        - make -j 
        - cd ../test_suite 
        - adduser temp
        - su -c "/testcode/bin/testcode.py" -s /bin/sh temp 
        - echo "everything passed!"

  debug_build: 
    - step: 
       script: 
        - rm -rf build 
        - mkdir build 
        - cd build 
        - cmake -DENABLE_BUILD_HDF5=On -DENABLE_HDF5=On -DCMAKE_BUILD_TYPE=Debug ..
        - make -j neci mneci kneci kmneci dneci
        - cd ../test_suite
        - adduser temp
        - su -c "/testcode/bin/testcode.py" -s /bin/sh temp
        - echo "debug build + test_suite passed!"


  build_docker_image:
    - step:
       script:
         - docker version
         # i have to figure out how to safely store my credentials in env variables.. 
         #- docker build -t dobrautz/neci_base:testsuite .
         #- docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
         #- docker push dobrautz/neci_base:testsuite

  build_hdf5:
    - step:
       script: 
         # test to build neci + hdf5 (without using a docker image with hdf5.. 
         # caching this hdf5 dependency(since the cache gets deleted every week any way would 
         # be an optimal combination.. 
        - rm -rf build 
        - mkdir build 
        - cd build 
        - cmake -DENABLE_BUILD_HDF5=ON -DENABLE_HDF5=ON ..
        - make -j hdf5 
        - make -j neci 

  unit_tests: 
    # give it a go with also including the unit-tests in the pipelin
    - step:
       script:
        - rm -rf build
        - mkdir build 
        - cd build 
        - cmake ..
        - make -j 
          # maybe i can call the unit_tests more elegantly..
        - ctest 

  full:
    # do the full testing i acutally want to do for every commit to master.. 
    - step: 
       script:
         # first do the debug build + hdf5 
        - echo "building debug version + hdf5!"
        - rm -rf build 
        - mkdir build 
        - cd build 
        - cmake -DENABLE_BUILD_HDF5=On -DENABLE_HDF5=On -DCMAKE_BUILD_TYPE=Debug ..
        - make -j neci mneci kneci kmneci dneci
        - echo "done building debug version. clean up!"
        - rm -rf * 
        - echo "building release version + hdf5!"
        - cmake -DENABLE_BUILD_HDF5=ON -DENABLE_HDF5=ON ..
        - make -j 
        - echo "done building release version + hdf5!"
        - echo "running unit tests"
        - ctest
        - echo "unit tests passed"
        - echo "running limited test_suite(to save build-minutes)"
        - adduser temp
        - su -c "/testcode/bin/testcode.py -c dneci/double_occ/hub_2x2 -c kmneci/Rn_lanczos_dci_init -c kneci/C_221_int -c mneci/cfqmc/HeHe_5_states -c neci/parallel/C_Solid" -s /bin/sh temp



options:
  docker: true

      
